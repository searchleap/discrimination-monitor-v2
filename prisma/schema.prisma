generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feed {
  id              String       @id @default(cuid())
  name            String
  url             String       @unique
  category        FeedCategory
  isActive        Boolean      @default(true)
  lastFetched     DateTime?
  status          FeedStatus   @default(ACTIVE)
  errorMessage    String?
  successRate     Float        @default(1.0)
  customHeaders   Json?
  processingRules Json?
  priority        Int          @default(1)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  articles        Article[]

  @@index([category])
  @@index([status])
  @@index([isActive])
}

model Article {
  id                 String             @id @default(cuid())
  title              String
  content            String
  summary            String?
  url                String             @unique
  publishedAt        DateTime
  source             String
  feedId             String
  location           ArticleLocation
  discriminationType DiscriminationType
  severity           SeverityLevel
  organizations      String[]
  keywords           String[]
  entities           Json?
  processed          Boolean            @default(false)
  processingError    String?
  confidenceScore    Float?
  aiClassification   Json?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  feed               Feed               @relation(fields: [feedId], references: [id], onDelete: Cascade)
  processingQueue    ProcessingQueue?

  @@index([location, publishedAt])
  @@index([discriminationType])
  @@index([severity, publishedAt])
  @@index([source, publishedAt])
  @@index([processed])
  @@index([publishedAt])
}

model ProcessingLog {
  id             String   @id @default(cuid())
  type           String
  status         String
  message        String?
  details        Json?
  processingTime Int?
  feedId         String?
  articleId      String?
  createdAt      DateTime @default(now())

  @@index([type, status])
  @@index([createdAt])
}

model ProcessingQueue {
  id          String        @id @default(cuid())
  articleId   String        @unique
  priority    QueuePriority @default(MEDIUM)
  status      QueueStatus   @default(PENDING)
  retryCount  Int           @default(0)
  maxRetries  Int           @default(3)
  error       String?
  queuedAt    DateTime      @default(now())
  processedAt DateTime?
  article     Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([status, priority])
  @@index([queuedAt])
  @@index([processedAt])
}

model SystemMetrics {
  id                     String   @id @default(cuid())
  date                   DateTime @unique @default(now())
  totalFeeds             Int
  activeFeeds            Int
  successfulFeeds        Int
  failedFeeds            Int
  totalArticles          Int
  michiganArticles       Int
  nationalArticles       Int
  internationalArticles  Int
  avgProcessingTime      Int
  classificationAccuracy Float?
  duplicateDetectionRate Float?
  dailyActiveUsers       Int?
  exportDownloads        Int?
  createdAt              DateTime @default(now())

  @@index([date])
}

model ProcessingMetrics {
  id             String   @id @default(cuid())
  timestamp      DateTime @default(now())
  batchSize      Int
  processedCount Int
  successCount   Int
  errorCount     Int
  processingTime Int
  queueDepth     Int
  workerStatus   String
  providerId     String?
  throughput     Float?
  averageLatency Int?
  errorRate      Float?
  memoryUsage    Int?
  cpuUsage       Float?

  @@index([timestamp])
  @@index([providerId])
}

model AlertConfig {
  id              String         @id @default(cuid())
  name            String         @unique
  type            AlertType
  enabled         Boolean        @default(true)
  threshold       Json
  severity        AlertSeverity  @default(MEDIUM)
  channels        Json
  config          Json
  escalationDelay Int?
  escalationTo    Json?
  lastTriggered   DateTime?
  acknowledgedAt  DateTime?
  acknowledgedBy  String?
  suppressedUntil DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  history         AlertHistory[]

  @@index([type, enabled])
  @@index([lastTriggered])
}

model AlertHistory {
  id             String        @id @default(cuid())
  alertConfigId  String
  severity       AlertSeverity
  message        String
  details        Json?
  status         AlertStatus   @default(ACTIVE)
  acknowledgedAt DateTime?
  acknowledgedBy String?
  resolvedAt     DateTime?
  triggeredAt    DateTime      @default(now())
  alertConfig    AlertConfig   @relation(fields: [alertConfigId], references: [id], onDelete: Cascade)

  @@index([alertConfigId, triggeredAt])
  @@index([status])
  @@index([severity])
}

model AIProvider {
  id             String       @id @default(cuid())
  name           String       @unique
  type           ProviderType
  enabled        Boolean      @default(true)
  priority       Int          @default(1)
  config         Json
  rateLimits     Json?
  lastUsed       DateTime?
  errorCount     Int          @default(0)
  successCount   Int          @default(0)
  successRate    Float        @default(1.0)
  averageLatency Int?
  requestCount   Int          @default(0)
  tokenUsage     Int          @default(0)
  estimatedCost  Float        @default(0.0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([type, enabled])
  @@index([priority])
  @@index([successRate])
}

model ProcessingSchedule {
  id                  String              @id @default(cuid())
  name                String              @unique
  description         String?
  cronExpression      String
  priority            SchedulePriority    @default(MEDIUM)
  enabled             Boolean             @default(true)
  config              Json
  lastRun             DateTime?
  nextRun             DateTime
  lastDuration        Int?
  lastResult          String?
  consecutiveFailures Int                 @default(0)
  slaTarget           Int?
  slaViolations       Int                 @default(0)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  executions          ScheduleExecution[]

  @@index([enabled, nextRun])
  @@index([priority])
}

model ScheduleExecution {
  id             String             @id @default(cuid())
  scheduleId     String
  startedAt      DateTime           @default(now())
  completedAt    DateTime?
  status         ExecutionStatus    @default(RUNNING)
  itemsProcessed Int                @default(0)
  itemsSucceeded Int                @default(0)
  itemsFailed    Int                @default(0)
  errorMessage   String?
  duration       Int?
  peakMemory     Int?
  schedule       ProcessingSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId, startedAt])
  @@index([status])
}

enum FeedCategory {
  CIVIL_RIGHTS
  GOVERNMENT
  ACADEMIC
  TECH_NEWS
  LEGAL
  HEALTHCARE
  MICHIGAN_LOCAL
  EMPLOYMENT
  DATA_ETHICS
  ADVOCACY
}

enum FeedStatus {
  ACTIVE
  ERROR
  DISABLED
  MAINTENANCE
}

enum ArticleLocation {
  MICHIGAN
  NATIONAL
  INTERNATIONAL
}

enum DiscriminationType {
  RACIAL
  RELIGIOUS
  DISABILITY
  GENERAL_AI
  MULTIPLE
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
}

enum QueuePriority {
  HIGH
  MEDIUM
  LOW
}

enum QueueStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AlertType {
  QUEUE_BACKLOG
  PROCESSING_FAILURE
  SYSTEM_HEALTH
  PERFORMANCE_DEGRADATION
  PROVIDER_FAILURE
  SCHEDULE_MISSED
  RESOURCE_EXHAUSTION
  CUSTOM
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  SUPPRESSED
}

enum ProviderType {
  OPENAI
  ANTHROPIC
  LOCAL
  CUSTOM
}

enum SchedulePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ExecutionStatus {
  SCHEDULED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// Content Filtering System

model ContentFilter {
  id          String    @id @default(cuid())
  term        String    // Keyword or phrase to match
  isActive    Boolean   @default(true)
  category    String?   // Optional grouping (e.g., "discrimination", "ai", "legal")
  description String?   // Admin notes about the filter
  matchCount  Int       @default(0) // Track how many articles matched this filter
  
  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String?   // Admin user who created it
  
  @@index([isActive])
  @@index([category])
  @@index([term])
}

model FilteringConfig {
  id              String      @id @default(cuid())
  name            String      @unique
  isActive        Boolean     @default(true)
  filterMode      FilterMode  @default(OR) // OR = any match, AND = all must match
  minTermLength   Int         @default(3)   // Minimum term length
  caseSensitive   Boolean     @default(false)
  
  // Statistics
  articlesFiltered    Int       @default(0) // Articles that were rejected
  articlesAccepted    Int       @default(0) // Articles that passed filtering
  lastApplied         DateTime?
  
  // Metadata
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([isActive])
}

enum FilterMode {
  OR   // Any filter matches = accept article
  AND  // All filters must match = accept article
}
