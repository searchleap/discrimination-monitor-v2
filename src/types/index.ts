// Note: These types will be generated by Prisma after running `npx prisma generate`
// For now, we'll define them manually for development
export interface Article {
  id: string
  title: string
  content: string
  summary?: string
  url: string
  publishedAt: Date
  source: string
  feedId: string
  location: 'MICHIGAN' | 'NATIONAL' | 'INTERNATIONAL'
  discriminationType: 'RACIAL' | 'RELIGIOUS' | 'DISABILITY' | 'GENERAL_AI' | 'MULTIPLE'
  severity: 'LOW' | 'MEDIUM' | 'HIGH'
  organizations: string[]
  keywords: string[]
  entities?: any | null
  processed: boolean
  processingError?: string | null
  confidenceScore?: number | null
  aiClassification?: any
  createdAt: Date
  updatedAt: Date
}

export interface Feed {
  id: string
  name: string
  url: string
  category: string
  isActive: boolean
  lastFetched?: Date | null
  status: 'ACTIVE' | 'ERROR' | 'DISABLED' | 'MAINTENANCE'
  errorMessage?: string | null
  successRate: number
  customHeaders?: any | null
  processingRules?: any | null
  priority: number
  createdAt: Date
  updatedAt: Date
}

export interface ProcessingLog {
  id: string
  type: string
  status: string
  message?: string
  details?: any
  processingTime?: number | null
  feedId?: string
  articleId?: string
  createdAt: Date
}

export interface SystemMetrics {
  id: string
  date: Date
  totalFeeds: number
  activeFeeds: number
  successfulFeeds: number
  failedFeeds: number
  totalArticles: number
  michiganArticles: number
  nationalArticles: number
  internationalArticles: number
  avgProcessingTime: number
  classificationAccuracy?: number
  duplicateDetectionRate?: number
  dailyActiveUsers?: number
  exportDownloads?: number
  createdAt: Date
}

// Extended types with relations
export interface ArticleWithFeed extends Article {
  feed: Feed
}

export interface FeedWithArticles extends Feed {
  articles: Article[]
}

// Dashboard types
export interface DashboardMetrics {
  totalArticles: number
  michiganArticles: number
  nationalArticles: number
  internationalArticles: number
  highSeverityArticles: number
  mediumSeverityArticles: number
  lowSeverityArticles: number
  activeFeeds: number
  successRate: number
  lastUpdated: Date
}

export interface TrendData {
  date: string
  michigan: number
  national: number
  international: number
}

export interface CategoryBreakdown {
  category: string
  count: number
  percentage: number
}

// Filter types
export interface ArticleFilters {
  location?: string[]
  discriminationType?: string[]
  severity?: string[]
  dateRange?: {
    from: Date
    to: Date
  }
  search?: string
  source?: string[]
}

export interface PaginationOptions {
  page: number
  limit: number
  sortBy?: string
  sortOrder?: 'asc' | 'desc'
}

// API Response types
export interface ApiResponse<T> {
  success: boolean
  data?: T
  error?: string
  message?: string
}

export interface PaginatedResponse<T> {
  data: T[]
  pagination: {
    currentPage: number
    totalPages: number
    totalItems: number
    hasNext: boolean
    hasPrevious: boolean
  }
}

// RSS Processing types
export interface RSSItem {
  title: string
  link: string
  description: string
  pubDate: string
  source: string
  feedId: string
}

export interface ProcessingResult {
  success: boolean
  articlesProcessed: number
  duplicatesFound: number
  errors: string[]
  processingTime: number
}

// AI Classification types
export interface AIClassificationResult {
  location: 'MICHIGAN' | 'NATIONAL' | 'INTERNATIONAL'
  discriminationType: 'RACIAL' | 'RELIGIOUS' | 'DISABILITY' | 'GENERAL_AI' | 'MULTIPLE'
  severity: 'LOW' | 'MEDIUM' | 'HIGH'
  confidenceScore: number
  reasoning: string
  entities: {
    locations: string[]
    people: string[]
    organizations: string[]
  }
  keywords: string[]
}

// Export types
export interface ExportOptions {
  format: 'csv' | 'pdf' | 'json'
  filters: ArticleFilters
  includeContent: boolean
  dateRange: {
    from: Date
    to: Date
  }
}

// Alert types
export interface AlertRule {
  id: string
  name: string
  conditions: {
    severity?: string[]
    location?: string[]
    discriminationType?: string[]
    keywords?: string[]
  }
  actions: {
    email?: string[]
    webhook?: string
  }
  isActive: boolean
  createdAt: Date
}

// User types (for future auth implementation)
export interface User {
  id: string
  email: string
  name: string
  role: 'ADMIN' | 'MODERATOR' | 'VIEWER'
  permissions: string[]
  lastLogin: Date
  createdAt: Date
}

// Chart data types
export interface ChartDataPoint {
  date: string
  value: number
  category?: string
}

export interface TimeSeriesData {
  label: string
  data: ChartDataPoint[]
  color: string
}

// Form types
export interface FeedFormData {
  name: string
  url: string
  category: string
  isActive: boolean
  customHeaders?: Record<string, string>
  priority: number
}

export interface ArticleFormData {
  title: string
  content: string
  summary: string
  url: string
  publishedAt: Date
  source: string
  location: string
  discriminationType: string
  severity: string
}

// Status types
export type ProcessingStatus = 'idle' | 'processing' | 'completed' | 'error'
export type FeedHealth = 'healthy' | 'warning' | 'error'

// AI Queue types
export interface QueueItem {
  id: string
  articleId: string
  priority: 'HIGH' | 'MEDIUM' | 'LOW'
  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED'
  retryCount: number
  maxRetries: number
  error?: string | null
  queuedAt: Date
  processedAt?: Date | null
  article?: Article
}

export interface QueueMetrics {
  pending: number
  processing: number
  completed: number
  failed: number
  total: number
  oldestPending?: Date
  averageProcessingTime: number
  successRate: number
}

export interface ProcessingSpeed {
  articlesPerHour: number
  averageProcessingTime: number
  successRate: number
}

export interface QueueStatus {
  isProcessing: boolean
  lastProcessed?: Date
  nextScheduled?: Date
  workerStatus: 'running' | 'stopped' | 'error'
}



// Export the types defined above
// These will be replaced by Prisma-generated types in production